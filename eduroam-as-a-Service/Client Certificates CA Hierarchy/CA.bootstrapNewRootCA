#!/bin/bash

#
#  this is a script to help generate certificates for use with
#  the EAP-TLS module.
#
#################################################################
#                                                               #
#       Originally written by Steve Walsh, ACU National         #
#       and Chris Myers, Grangenet                              #
#       email: stephen.walsh@acu.edu.au                         #
#       email: chris.myers@aarnet.edu.au                        #
#       for the Grangenet/AARNET EduROAM wireless project       #
#                                                               #
#       Substantially modified for eduroam-as-a-Service use     #
#       by Stefan Winter, stefan.winter@restena.lu              #
#                                                               #
#################################################################
#                                                               #
#       Please send bug reports to stephen.walsh@acu.edu.au     #
#       or to stefan.winter@restena.lu                          #
#                                                               #
#################################################################

Pause()                         # Define a shell function called Pause
{
    echo
    echo -n Hit Enter to continue....
    read
}
#
#To start, let's finds the path and version of openssl

echo "##############"
echo "# We are using the following openssl tools, abort with Ctrl-C if that's not what you want:"
echo "##############"

openssl=$(which openssl)
version=$($openssl version)
# when using the hardware random number generator on a Raspberry Pi, 
# change the file name to /dev/hwrng
randomsource=/dev/hwrng

echo "openSSL path   : $openssl"
echo "openSSL version: $version"

echo -n "Generating random source file ... "

dd if=$randomsource of=settings/random count=2

if ["$1" == ""]; then
while true; do
echo
echo "Please enter the password for the CA: "
read PASSWORD
 echo "you entered $PASSWORD. Is this correct? (y/n)"
 read yn
  case $yn in
   y* | Y* ) echo "next step.." ; break ;;
   [nN]* )   echo "Check your keyboard and try again" ;;
 esac
done;
else
PASSWORD=$0
fi

if ["$2" != ""]; then
SUBJECT_R="-subj $1 R";
SUBJECT_E="-subj $1 E";
fi

echo -e ""
echo -e "\t\t##################"
echo -e "\t\tcreating private key and cert request"
echo -e "\t\t##################\n"
$openssl ecparam -name secp521r1 >ec-521.param
$openssl req -config ./settings/openssl-rsa.cnf -rand ./settings/random -new -newkey rsa:4096 -sha512 -x509 -keyout newreq.pem -out newreq.pem -days 20000 $SUBJECT_R -passin pass:$PASSWORD -passout pass:$PASSWORD
$openssl req -config ./settings/openssl-ecdsa.cnf -rand ./settings/random -new -newkey ec:ec-521.param -sha512 -x509 -keyout newreq-ecdsa.pem -out newreq-ecdsa.pem -days 20000 $SUBJECT_E -passin pass:$PASSWORD -passout pass:$PASSWORD

echo -e ""
echo -e "\t\t##################"
echo -e "\t\tcreate RSA CA by self-signing request"
echo -e "\t\t##################\n"

echo "newreq.pem" | ./settings/CA-RSA.pl -newca

echo -e ""
echo -e "\t\t##################"
echo -e "\t\tcreate ECDSA CA by self-signing request"
echo -e "\t\t##################\n"

echo "newreq-ecdsa.pem" | ./settings/CA-ECDSA.pl -newca

echo -e ""
echo -e "\t\t##################"
echo -e "\t\texporting CA in varius formats"
echo -e "\t\t##################\n"

$openssl pkcs12 -export -in ROOT-RSA/cacert.pem -inkey newreq.pem -out ROOT-RSA/private/root.p12 -cacerts -passin pass:$PASSWORD -passout pass:$PASSWORD
$openssl pkcs12 -export -in ROOT-ECDSA/cacert.pem -inkey newreq-ecdsa.pem -out ROOT-ECDSA/private/root.p12 -cacerts -passin pass:$PASSWORD -passout pass:$PASSWORD
$openssl pkcs12 -in ROOT-RSA/private/root.p12 -out ROOT-RSA/private/root.pem -passin pass:$PASSWORD -passout pass:$PASSWORD
$openssl pkcs12 -in ROOT-ECDSA/private/root.p12 -out ROOT-ECDSA/private/root.pem -passin pass:$PASSWORD -passout pass:$PASSWORD
$openssl x509 -inform PEM -outform DER -in ROOT-RSA/private/root.pem -out ROOT-RSA/private/root.der
$openssl x509 -inform PEM -outform DER -in ROOT-ECDSA/private/root.pem -out ROOT-ECDSA/private/root.der
mv newreq.pem ROOT-RSA/private/
mv newreq-ecdsa.pem ROOT-ECDSA/private/

dd if=$randomsource count=1 | tr -dc [:xdigit:] | cut -c 1-12 | tr '[:upper:]' '[:lower:]' > ROOT-RSA/serial
dd if=$randomsource count=1 | tr -dc [:xdigit:] | cut -c 1-12 | tr '[:upper:]' '[:lower:]' > ROOT-ECDSA/serial

mkdir ROOT-RSA/OCSP
mkdir ROOT-ECDSA/OCSP
